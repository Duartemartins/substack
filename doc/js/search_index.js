var search_data = {"index":{"searchIndex":["substack","apierror","authenticationerror","client","api","base","endpoints","error","notfounderror","permissionerror","post","ratelimiterror","validationerror","add()","attach_image()","captioned_image()","default_message()","default_message()","error_details()","following_feed()","get_draft()","get_user_id()","get_user_profile()","heading()","horizontal_rule()","inbox_top()","live_streams()","load_cookies()","login()","mark_inbox_seen()","marks()","new()","new()","new()","new()","paragraph()","post_draft()","post_note()","post_note_with_image()","post_note_with_local_image()","publication_posts()","react_to_note()","save_cookies()","set_section()","subscribe_with_caption()","text()","unread_count()","update_user_setting()","upload_image()","validate_user_id()","youtube()","documentation","gemfile","gemfile.lock","license","readme","rakefile"],"longSearchIndex":["substack","substack::apierror","substack::authenticationerror","substack::client","substack::client::api","substack::client::base","substack::endpoints","substack::error","substack::notfounderror","substack::permissionerror","substack::post","substack::ratelimiterror","substack::validationerror","substack::post#add()","substack::client::api#attach_image()","substack::post#captioned_image()","substack::apierror#default_message()","substack::validationerror#default_message()","substack::validationerror#error_details()","substack::client::api#following_feed()","substack::post#get_draft()","substack::client#get_user_id()","substack::client#get_user_profile()","substack::post#heading()","substack::post#horizontal_rule()","substack::client::api#inbox_top()","substack::client::api#live_streams()","substack::client::base#load_cookies()","substack::client::base#login()","substack::client::api#mark_inbox_seen()","substack::post#marks()","substack::apierror::new()","substack::client::new()","substack::client::base::new()","substack::post::new()","substack::post#paragraph()","substack::client#post_draft()","substack::client::api#post_note()","substack::client::api#post_note_with_image()","substack::client::api#post_note_with_local_image()","substack::client::api#publication_posts()","substack::client::api#react_to_note()","substack::client::base#save_cookies()","substack::post#set_section()","substack::post#subscribe_with_caption()","substack::post#text()","substack::client::api#unread_count()","substack::client::api#update_user_setting()","substack::client::api#upload_image()","substack::post#validate_user_id()","substack::post#youtube()","","","","","",""],"info":[["Substack","","Substack.html","","<p>Substack API Wrapper\n<p>A Ruby wrapper for the unofficial Substack API. This gem provides methods for authenticating …\n"],["Substack::APIError","","Substack/APIError.html","","<p>General API response error with status code and error details. This is the parent class for more specific …\n"],["Substack::AuthenticationError","","Substack/AuthenticationError.html","","<p>Raised when authentication with Substack fails or when a valid session is required but not available. …\n"],["Substack::Client","","Substack/Client.html","","<p>Client Class\n<p>The main client class for interacting with the Substack API. This class combines the Base …\n"],["Substack::Client::API","","Substack/Client/API.html","","<p>API Module\n<p>The API module provides methods for interacting with Substack’s API endpoints. This includes …\n"],["Substack::Client::Base","","Substack/Client/Base.html","","<p>Base Module\n<p>The Base module provides authentication functionality for the Substack API client. It handles …\n"],["Substack::Endpoints","","Substack/Endpoints.html","","<p>The Endpoints module contains constants for all Substack API endpoints. These are used throughout the …\n"],["Substack::Error","","Substack/Error.html","","<p>Error classes\n<p>Base error class for all Substack API errors\n"],["Substack::NotFoundError","","Substack/NotFoundError.html","","<p>Raised when a requested resource is not found (HTTP 404)\n"],["Substack::PermissionError","","Substack/PermissionError.html","","<p>Raised for permission-related errors (HTTP 403)\n"],["Substack::Post","","Substack/Post.html","","<p>Post Class\n<p>The Post class provides methods for building a draft post on Substack. It allows for adding …\n"],["Substack::RateLimitError","","Substack/RateLimitError.html","","<p>Raised when the API enforces rate limiting (HTTP 429)\n"],["Substack::ValidationError","","Substack/ValidationError.html","","<p>Raised when the API rejects input due to validation errors (HTTP 422)\n<p>This class provides additional methods …\n"],["add","Substack::Post","Substack/Post.html#method-i-add","(item)","<p>Add a generic item to the post\n<p>@param item [Hash] The item to add @option item [String] :type The type …\n"],["attach_image","Substack::Client::API","Substack/Client/API.html#method-i-attach_image","(image_url)","<p>Convert an image URL to an attachment ID\n<p>@param image_url [String] URL of the image to attach @return …\n"],["captioned_image","Substack::Post","Substack/Post.html#method-i-captioned_image","(attrs)","<p>Add a captioned image to the post\n<p>@param attrs [Hash] Image attributes @option attrs [String] :src Image …\n"],["default_message","Substack::APIError","Substack/APIError.html#method-i-default_message","()","<p>Generate a default error message based on the status code\n<p>@return [String] A descriptive error message …\n"],["default_message","Substack::ValidationError","Substack/ValidationError.html#method-i-default_message","()","<p>Generate a default error message including validation details\n<p>@return [String] A detailed validation error …\n"],["error_details","Substack::ValidationError","Substack/ValidationError.html#method-i-error_details","()","<p>Format validation error details into a human-readable string\n<p>@return [String] Formatted error details …\n"],["following_feed","Substack::Client::API","Substack/Client/API.html#method-i-following_feed","(page: 1, limit: 25)","<p>Get the user’s following feed\n<p>@param page [Integer] The page number to fetch @param limit [Integer] …\n"],["get_draft","Substack::Post","Substack/Post.html#method-i-get_draft","()","<p>Get the draft post data for submission to the API\n<p>@return [Hash] The complete draft post data\n"],["get_user_id","Substack::Client","Substack/Client.html#method-i-get_user_id","()","<p>Get the current user’s ID\n<p>@return [Integer] The user’s ID\n"],["get_user_profile","Substack::Client","Substack/Client.html#method-i-get_user_profile","()","<p>Get the current user’s profile information\n<p>@return [Hash] The user’s profile data\n"],["heading","Substack::Post","Substack/Post.html#method-i-heading","(content, level: 1)","<p>Add a heading to the post\n<p>@param content [String] The heading text @param level [Integer] The heading …\n"],["horizontal_rule","Substack::Post","Substack/Post.html#method-i-horizontal_rule","()","<p>Add a horizontal rule to the post\n<p>@return [void]\n"],["inbox_top","Substack::Client::API","Substack/Client/API.html#method-i-inbox_top","()","<p>Get the user’s inbox notifications\n<p>@return [Hash] Inbox notifications data\n"],["live_streams","Substack::Client::API","Substack/Client/API.html#method-i-live_streams","()","<p>Get active live streams\n<p>@return [Array] List of active live streams\n"],["load_cookies","Substack::Client::Base","Substack/Client/Base.html#method-i-load_cookies","(path)","<p>Load session cookies from a file\n<p>Supports both YAML (preferred) and JSON formats for backward compatibility. …\n"],["login","Substack::Client::Base","Substack/Client/Base.html#method-i-login","(email, password)","<p>Log in to Substack using Selenium WebDriver\n<p>This method opens a headless Chrome browser, navigates to …\n"],["mark_inbox_seen","Substack::Client::API","Substack/Client/API.html#method-i-mark_inbox_seen","(ids = [])","<p>Mark specified notifications as read\n<p>@param ids [Array&lt;String&gt;] IDs of notifications to mark as …\n"],["marks","Substack::Post","Substack/Post.html#method-i-marks","(marks)","<p>Add formatting marks to the last text item\n<p>@param marks [Array&lt;Hash&gt;] The marks to add @option marks …\n"],["new","Substack::APIError","Substack/APIError.html#method-c-new","(message = nil, status: nil, errors: nil)","<p>Initialize a new API error\n<p>@param message [String, nil] Error message @param status [Integer, nil] HTTP …\n"],["new","Substack::Client","Substack/Client.html#method-c-new","(email: nil, password: nil, cookies_path: nil, base_url: nil, publication_url: nil, debug: false)","<p>Initialize a new Substack client\n<p>Note: This method is primarily defined in the Base module, but additional …\n"],["new","Substack::Client::Base","Substack/Client/Base.html#method-c-new","(email: nil, password: nil, cookies_path: nil, debug: false)","<p>Initialize the client with authentication credentials\n<p>@param email [String, nil] Substack account email …\n"],["new","Substack::Post","Substack/Post.html#method-c-new","(title:, subtitle:, user_id:, audience: \"everyone\", write_comment_permissions: nil)","<p>Initialize a new draft post\n<p>@param title [String] The post title @param subtitle [String] The post subtitle …\n"],["paragraph","Substack::Post","Substack/Post.html#method-i-paragraph","(content)","<p>Add a paragraph to the post\n<p>@param content [String] The paragraph text @return [void]\n"],["post_draft","Substack::Client","Substack/Client.html#method-i-post_draft","(draft)","<p>Post a draft to Substack\n<p>@param draft [Hash] The draft post content (usually from Post#get_draft) @return …\n"],["post_note","Substack::Client::API","Substack/Client/API.html#method-i-post_note","(text:, attachments: [])","<p>Post a note (Substack’s equivalent of a tweet)\n<p>@param text [String] The text content of the note @param …\n"],["post_note_with_image","Substack::Client::API","Substack/Client/API.html#method-i-post_note_with_image","(text:, image_url:)","<p>Post a note with an image from a URL\n<p>@param text [String] The text content of the note @param image_url …\n"],["post_note_with_local_image","Substack::Client::API","Substack/Client/API.html#method-i-post_note_with_local_image","(text:, image_path:)","<p>Upload a local image and post a note with it\n<p>@param text [String] The text content of the note @param …\n"],["publication_posts","Substack::Client::API","Substack/Client/API.html#method-i-publication_posts","(publication, limit: 25, offset: 0)","<p>Get posts from a publication (public endpoint)\n<p>@param publication [String] The publication subdomain @param …\n"],["react_to_note","Substack::Client::API","Substack/Client/API.html#method-i-react_to_note","(id, reaction_type = \"heart\")","<p>React to a note (like, etc.)\n<p>@param id [String] The ID of the note to react to @param reaction_type [String] …\n"],["save_cookies","Substack::Client::Base","Substack/Client/Base.html#method-i-save_cookies","(path = @cookies_path)","<p>Save session cookies to a file\n<p>@param path [String] Path where cookies will be saved\n"],["set_section","Substack::Post","Substack/Post.html#method-i-set_section","(name, sections)","<p>Set the section for the post\n<p>@param name [String] The name of the section @param sections [Array&lt;Hash&gt;] …\n"],["subscribe_with_caption","Substack::Post","Substack/Post.html#method-i-subscribe_with_caption","(message: nil)","<p>Add a subscription widget with a caption\n<p>@param message [String, nil] The caption message @return [void] …\n"],["text","Substack::Post","Substack/Post.html#method-i-text","(value)","<p>Add text to the last content item\n<p>@param value [String] The text to add @return [void]\n"],["unread_count","Substack::Client::API","Substack/Client/API.html#method-i-unread_count","()","<p>Get count of unread messages\n<p>@return [Hash] Counts of unread messages, pending invites, etc.\n"],["update_user_setting","Substack::Client::API","Substack/Client/API.html#method-i-update_user_setting","(settings = {})","<p>Update user settings\n<p>@param settings [Hash] Settings to update @return [Hash] Response data\n"],["upload_image","Substack::Client::API","Substack/Client/API.html#method-i-upload_image","(file_path)","<p>Upload an image to Substack\n<p>@param file_path [String] Path to the image file to upload @return [Hash] …\n"],["validate_user_id","Substack::Post","Substack/Post.html#method-i-validate_user_id","(user_id)","<p>Validate and convert user ID\n<p>@param user_id [Integer, #to_i] The user ID to validate @return [Integer] …\n"],["youtube","Substack::Post","Substack/Post.html#method-i-youtube","(video_id)","<p>Add a YouTube video to the post\n<p>@param video_id [String] The YouTube video ID @return [void]\n"],["DOCUMENTATION","","DOCUMENTATION_md.html","","<p>Generating RDoc Documentation\n<p>This document describes how to generate and view the RDoc documentation …\n"],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’\n<p>ruby ‘3.3.0’\n<p>gem ‘selenium-webdriver’, ‘~&gt; 4.0’ …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  activesupport (7.2.2.1)\n    base64\n    benchmark (&gt;= 0.3)\n ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>Apache License Version 2.0, January 2004 www.apache.org/licenses/\n<p>TERMS AND CONDITIONS FOR USE, REPRODUCTION …\n"],["README","","README_md.html","","<p>Substack Ruby Gem\n<p>This is a reverse-engineered Ruby wrapper for the Substack API. Please note that this …\n"],["Rakefile","","Rakefile.html","","<p>require ‘bundler/gem_tasks’ require ‘rake/testtask’\n<p>Rake::TestTask.new(:test) do |t|\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">libs</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}